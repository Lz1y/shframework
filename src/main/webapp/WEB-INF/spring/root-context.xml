<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
						http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
				        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
				        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
	
	<!-- Grab out properties for use in these Spring Configs -->
	<context:property-placeholder location="classpath:db/jdbc/jdbc.properties, classpath:db/mybatis/mybatis.properties, classpath:shiro/shiro.properties, classpath:redis/redis.properties" />
	
	<!-- Scans the classpath of this application for @Components to deploy as beans -->
	<context:component-scan base-package="com.shframework.modules" />
	<context:component-scan base-package="com.shframework.common.base" />
	<context:component-scan base-package="com.shframework.common.notification" />
	
	<!-- Enable Autowire 
	<context:annotation-config />-->
	
	<!-- Configures the @Controller programming model -->
	<mvc:annotation-driven>
		<!-- 自定义参数转换器 -->	
	    <mvc:argument-resolvers>
	        <bean class="com.shframework.common.resolver.PageSupportResolver" />  
	    </mvc:argument-resolvers>
	</mvc:annotation-driven>
    
    <!-- 数据源配置, 使用DBCP数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <property name="driverClassName" value="${app.jdbc.driverClassName}" />
        <property name="url" value="#{T(com.shframework.common.util.EncryptionUtil).decrypt('${app.jdbc.url}')}" />
        <property name="username" value="#{T(com.shframework.common.util.EncryptionUtil).decrypt('${app.jdbc.username}')}" />
        <property name="password" value="#{T(com.shframework.common.util.EncryptionUtil).decrypt('${app.jdbc.password}')}" />
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${initialSize}" />
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${maxActive}" />
        <!-- 最大空闲连接数 
        <property name="maxIdle" value="${maxIdle}" />-->
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${maxWait}" />
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="${removeAbandoned}" />
        <!-- 超过时间限制多长； -->
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="${validationQuery}" />
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="${testWhileIdle}" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="${testOnBorrow}" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="${testOnReturn}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${maxPoolPreparedStatementPerConnectionSize}" />
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御SQL注入的filter:wall -->
        <property name="filters" value="${filters}" />
    </bean>
    <!-- 
	<bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
	
    Jpa Entity Manager 配置
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
        <property name="packagesToScan" value="me.kafeitu.demo.activiti.entity.oa"/>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
    </bean>
    
    Activiti begin
    <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
        <property name="dataSource" ref="dataSource"/>
        <property name="transactionManager" ref="transactionManager"/>
        <property name="databaseSchemaUpdate" value="true"/>
        <property name="jobExecutorActivate" value="false"/>
        <property name="history" value="full"/>
        <property name="processDefinitionCacheLimit" value="10"/>

        mail
        <property name="mailServerHost" value="localhost"/>
        <property name="mailServerUsername" value="root"/>
        <property name="mailServerPassword" value="valenty"/>
        <property name="mailServerPort" value="2025"/>

        UUID作为主键生成策略
        <property name="idGenerator" ref="uuidGenerator" />
       

        生成流程图的字体
        <property name="activityFontName" value="${diagram.activityFontName}"/>
        <property name="labelFontName" value="${diagram.labelFontName}"/>

        缓存支持 
        <property name="processDefinitionCache">
            <bean class="me.kafeitu.demo.activiti.util.cache.DistributedCache" />
        </property>

        自动部署
        <property name="deploymentResources">
            <list>
                <value>classpath*:/deploy/*</value>
            </list>
        </property>

        自定义表单字段类型
        <property name="customFormTypes">
            <list>
                <bean class="com.shframework.common.activiti.form.UsersFormType"/>
            </list>
        </property>

        JPA
        <property name="jpaEntityManagerFactory" ref="entityManagerFactory" />
        <property name="jpaHandleTransaction" value="false" />
        <property name="jpaCloseEntityManager" value="false" />

        全局事件 
        <property name="typedEventListeners">
            <map>
                <entry key="VARIABLE_CREATED" >
                    <list>
                        <ref bean="variableCreateListener"/>
                    </list>
                </entry>
            </map>
        </property>
    </bean>
    
    <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
        <property name="processEngineConfiguration" ref="processEngineConfiguration"/>
    </bean>
	
    <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService"/>
    <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService"/>
    <bean id="formService" factory-bean="processEngine" factory-method="getFormService"/>
    <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService"/>
    <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService"/>
    <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"/>
    <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService"/>
     -->
    
    <!-- Activiti end -->
    <!-- 
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">
        <property name="hostName" value="localhost" />
        <property name="port" value="6380" />
        <property name="timeout" value="15000" />
        <property name="database" value="0" />
        <property name="password" value="" />
        <property name="usePool" value="true" />
        <property name="poolConfig" ref="poolConfig" />
    </bean>
 
    redis template definition p表示对该bean里面的属性进行注入，格式为p:属性名=注入的对象 效果与在bean里面使用<property>标签一样
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" p:connection-factory-ref="jedisConnectionFactory">
        序列化方式 建议key/hashKey采用StringRedisSerializer。
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
    </bean>
    
    对string操作的封装
    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate" p:connection-factory-ref="jedisConnectionFactory" /> -->
    <!-- <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager"
        c:template-ref="redisTemplate"/> -->
    
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxActive" value="${redis.maxActive}" />
        <property name="maxWait" value="${redis.maxWait}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
	    <property name="hostName" value="${redis.host}" />
	    <property name="port" value="${redis.port}" />
	    <property name="poolConfig" ref="jedisPoolConfig" />
	</bean>
    <bean class="org.springframework.data.redis.core.RedisTemplate" p:connection-factory-ref="jedisConnectionFactory" /> 
    
	<!-- Configures Interceptor -->
	<mvc:interceptors>
		<bean class="com.shframework.common.interceptor.BaseInterceptor" />
		<bean class="com.shframework.common.interceptor.HomeCacheInterceptor" />
		<bean class="com.shframework.common.interceptor.LoggingResponseInterceptor" />
	</mvc:interceptors> 
    
	<!-- Application Message Bundle -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:message" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="cacheSeconds" value="3000" />
	</bean>
	
	<!-- Bean Mapper -->
	<bean id="beanMapper" class="org.dozer.DozerBeanMapper" scope="singleton">
        <property name="mappingFiles"  value="mapper/dozer-bean-mappings.xml" />
    </bean>
    
    <!-- 异常处理 -->
	<bean id="exceptionHandler" class="com.shframework.common.web.exception.ExceptionHandler"/>
    
	<!-- JDBC Configuration -->
	<import resource="classpath:db/jdbc/jdbc-context.xml"/>
	
	<!-- Security Configuration / Apache Shiro -->
	<import resource="classpath:shiro/shiro-context.xml" />
	
    <!-- 定义aspectj -->
    <aop:aspectj-autoproxy/>
    
</beans>
