<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.shframework.modules.dict.mapper.DictCommonMapper" >
  <resultMap id="BaseResultMap" type="com.shframework.modules.dict.entity.DictCommon" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="code" property="code" jdbcType="VARCHAR" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="priority" property="priority" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="locked" property="locked" jdbcType="INTEGER" />
    <result column="standard" property="standard" jdbcType="INTEGER" />
    <result column="logic_delete" property="logicDelete" jdbcType="INTEGER" />
  </resultMap>
  
  <select id="queryIdByTitle" parameterType="java.lang.String" resultType="int">
  	select id from #{tbname} where title = #{title}
  </select>
 
  <!-- 
   /**
     * 根据查询条件map，查找符合条件的记录数量
     * @param parMap 
     * {
     * String tableName;
     * String searchCondition;
     * int limitStart;
     * int limitEnd;
     * }
     * @return
     * @author RanWeizheng
     */
   -->
   <select id="countByMap" parameterType="map" resultType="java.lang.Integer" >
    select count(*) from ${tableName} as _dc
    <where>
     _dc.logic_delete = 0
     ${searchCondition}
     </where>
  </select>
  
   <!-- 
    /**
     * 根据查询条件map，查找符合条件的记录
     * @param parMap 
     * {
     * String tableName;
     * String searchCondition;
     * int limitStart;
     * int limitEnd;
     * }
     * @return
     * @author RanWeizheng
     */
   -->
  <select id="selectByMap" resultMap="BaseResultMap" parameterType="map" >
    select
    _dc.* 
    from ${tableName} as _dc
    <where>
    _dc.logic_delete = 0
    ${searchCondition}
    <if test="searchCondition == null or searchCondition == ''" >
      order by ${defaultSortField}
    </if>
    </where>
    limit #{limitStart}, #{limitEnd}
  </select>
  
  <!-- 
   /**
     * 根据表名，获取状态为选用，未删除，且根据priority字段排序 的 记录数据
     * @param tableName
     * @return
     */
    public List<Map<String, String>> getAllUserfulByTableName(String tableName);
   -->
   <select id="getAllUseableByTableName" parameterType="java.lang.String" resultType="map">
    select 
        id as _dictKey,
        concat(code,'-', title) as _dictValue
    from ${tableName}
    where
        logic_delete = 0
        AND `status` = 1
      order by priority 
   </select>
  
  <!-- 
   /**
     * 获取所有字典表的名字和字典表的描述文字
     * @author RanWeizheng
     * @return
     */
    public List<Map<String, String>>  getAllDictInfo();
   -->
   <select id="getAllDictInfo" resultType="map" parameterType="java.lang.String">
	SELECT
		TABLE_NAME,
		TABLE_COMMENT
	FROM
		information_schema.`TABLES`
	WHERE
		TABLE_SCHEMA = #{0}
	AND TABLE_NAME LIKE 'dict_%'
	order by TABLE_NAME
   </select>
  
 <select id="getDictInfoByTableName" resultType="map" parameterType="map" statementType="STATEMENT">
  DESCRIBE ${tableName} `code`
 </select>
   
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="map" >
    select
    *
    from ${tableName}
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null" >
      order by ${example.orderByClause}
    </if>
    <choose >
      <when test="example.limitStart != -1 and example.limitEnd != -1" >
        limit ${example.limitStart} , ${example.limitEnd}
      </when>
      <when test="example.limitStart != -1" >
        limit ${example.limitStart}
      </when>
    </choose>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="map" >
    select 
    *
    from ${tableName}
    where
     id = #{id,jdbcType=INTEGER}
     and logic_delete = 0
  </select>
  <delete id="deleteByPrimaryKey" parameterType="map" >
    delete from ${tableName}
    where 
    id = #{id,jdbcType=INTEGER}
    and logic_delete = 0
  </delete>
  <delete id="deleteByExample" parameterType="map" >
    delete from ${tableName}
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertSelective" parameterType="map" >
    insert into ${tableName}
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="record.id != null" >
        id,
      </if>
      <if test="record.code != null" >
        code,
      </if>
      <if test="record.title != null" >
        title,
      </if>
      <if test="record.priority != null" >
        priority,
      </if>
      <if test="record.status != null" >
        status,
      </if>
      <if test="record.locked != null" >
        locked,
      </if>
      <if test="record.standard != null" >
        standard,
      </if>
      <if test="record.logicDelete != null" >
        logic_delete,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="record.id != null" >
        #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.code != null" >
        #{record.code,jdbcType=VARCHAR},
      </if>
      <if test="record.title != null" >
        #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.priority != null" >
        #{record.priority,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.locked != null" >
        #{record.locked,jdbcType=INTEGER},
      </if>
      <if test="record.standard != null" >
        #{record.standard,jdbcType=INTEGER},
      </if>
      <if test="record.logicDelete != null" >
        #{record.logicDelete,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="map" resultType="java.lang.Integer" >
    select count(*) from ${tableName}
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update ${tableName}
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.code != null" >
        code = #{record.code,jdbcType=VARCHAR},
      </if>
      <if test="record.title != null" >
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.priority != null" >
        priority = #{record.priority,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.locked != null" >
        locked = #{record.locked,jdbcType=INTEGER},
      </if>
      <if test="record.standard != null" >
        standard = #{record.standard,jdbcType=INTEGER},
      </if>
      <if test="record.logicDelete != null" >
        logic_delete = #{record.logicDelete,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map" >
    update ${tableName}
    <set >
      <if test="record.code != null" >
        code = #{record.code,jdbcType=VARCHAR},
      </if>
      <if test="record.title != null" >
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.priority != null" >
        priority = #{record.priority,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.locked != null" >
        locked = #{record.locked,jdbcType=INTEGER},
      </if>
      <if test="record.standard != null" >
        standard = #{record.standard,jdbcType=INTEGER},
      </if>
      <if test="record.logicDelete != null" >
        logic_delete = #{record.logicDelete,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{record.id,jdbcType=INTEGER}
    and logic_delete = 0
  </update>
</mapper>